// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: configsvc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigSvcClient is the client API for ConfigSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigSvcClient interface {
	SetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigRequest, error)
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigRequest, error)
	UpdConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigRequest, error)
	DelConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigRequest, error)
}

type configSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigSvcClient(cc grpc.ClientConnInterface) ConfigSvcClient {
	return &configSvcClient{cc}
}

func (c *configSvcClient) SetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigRequest, error) {
	out := new(ConfigRequest)
	err := c.cc.Invoke(ctx, "/pb.ConfigSvc/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSvcClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigRequest, error) {
	out := new(ConfigRequest)
	err := c.cc.Invoke(ctx, "/pb.ConfigSvc/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSvcClient) UpdConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigRequest, error) {
	out := new(ConfigRequest)
	err := c.cc.Invoke(ctx, "/pb.ConfigSvc/UpdConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSvcClient) DelConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigRequest, error) {
	out := new(ConfigRequest)
	err := c.cc.Invoke(ctx, "/pb.ConfigSvc/DelConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigSvcServer is the server API for ConfigSvc service.
// All implementations must embed UnimplementedConfigSvcServer
// for forward compatibility
type ConfigSvcServer interface {
	SetConfig(context.Context, *ConfigRequest) (*ConfigRequest, error)
	GetConfig(context.Context, *ConfigRequest) (*ConfigRequest, error)
	UpdConfig(context.Context, *ConfigRequest) (*ConfigRequest, error)
	DelConfig(context.Context, *ConfigRequest) (*ConfigRequest, error)
	mustEmbedUnimplementedConfigSvcServer()
}

// UnimplementedConfigSvcServer must be embedded to have forward compatible implementations.
type UnimplementedConfigSvcServer struct {
}

func (UnimplementedConfigSvcServer) SetConfig(context.Context, *ConfigRequest) (*ConfigRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedConfigSvcServer) GetConfig(context.Context, *ConfigRequest) (*ConfigRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedConfigSvcServer) UpdConfig(context.Context, *ConfigRequest) (*ConfigRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdConfig not implemented")
}
func (UnimplementedConfigSvcServer) DelConfig(context.Context, *ConfigRequest) (*ConfigRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConfig not implemented")
}
func (UnimplementedConfigSvcServer) mustEmbedUnimplementedConfigSvcServer() {}

// UnsafeConfigSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigSvcServer will
// result in compilation errors.
type UnsafeConfigSvcServer interface {
	mustEmbedUnimplementedConfigSvcServer()
}

func RegisterConfigSvcServer(s grpc.ServiceRegistrar, srv ConfigSvcServer) {
	s.RegisterService(&ConfigSvc_ServiceDesc, srv)
}

func _ConfigSvc_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSvcServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConfigSvc/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSvcServer).SetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSvc_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSvcServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConfigSvc/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSvcServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSvc_UpdConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSvcServer).UpdConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConfigSvc/UpdConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSvcServer).UpdConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSvc_DelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSvcServer).DelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConfigSvc/DelConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSvcServer).DelConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigSvc_ServiceDesc is the grpc.ServiceDesc for ConfigSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ConfigSvc",
	HandlerType: (*ConfigSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _ConfigSvc_SetConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ConfigSvc_GetConfig_Handler,
		},
		{
			MethodName: "UpdConfig",
			Handler:    _ConfigSvc_UpdConfig_Handler,
		},
		{
			MethodName: "DelConfig",
			Handler:    _ConfigSvc_DelConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configsvc.proto",
}
